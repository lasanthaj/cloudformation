{
"AWSTemplateFormatVersion": "2010-09-09",
"Description" : "Second AWS CF template",
"Parameters" : {
    "KeyName" : {
    "Description" : "Name of existing KeyPair to enable SSH access to instance" ,
    "Type" : "AWS::EC2::KeyPair::KeyName",
    "ConstraintDescription" : "Must be a valid existing KeyPair"
  },

    "DBName": {
      "Default": "MyDatabase",
      "Description" : "MySQL database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "Must begin with a letter and contain only alphanumeric characters"
    },

    "DBUsername": {
      "NoEcho": "true",
      "Description" : "Username for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "Must begin with a letter and contain only alphanumeric characters"
    },

    "DBPassword": {
      "NoEcho": "true",
      "Description" : "Password for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "Must contain only alphanumeric characters"
    },

    "DBRootPassword": {
      "NoEcho": "true",
      "Description" : "Root password for MySQL",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "Must contain only alphanumeric characters"
    },
  "InstanceType" : {
    "Description" : "WebServer EC2 instance type",
    "Type" : "String",
    "Default" : "t2.micro",
    "AllowedValues" : ["t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
    "ConstraintDescription" : "Must be valid EC2 instance type"
  },
  "SSHLocation" : {
    "Description" : "The IP address range to allow access to Instance via SSH",
    "Type" : "String",
    "MinLength" : "9",
    "MaxLength" : "18",
    "Default" : "0.0.0.0/0",
    "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
    "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
  }
},
"Mappings" : {
  "AWSInstanceType2Arch" : {
    "t1.micro"    : { "Arch" : "PV64"   },
    "t2.nano"     : { "Arch" : "HVM64"  },
    "t2.micro"    : { "Arch" : "HVM64"  },
    "t2.small"    : { "Arch" : "HVM64"  },
    "t2.medium"   : { "Arch" : "HVM64"  },
    "t2.large"    : { "Arch" : "HVM64"  },
    "m1.small"    : { "Arch" : "PV64"   },
    "m1.medium"   : { "Arch" : "PV64"   },
    "m1.large"    : { "Arch" : "PV64"   },
    "m1.xlarge"   : { "Arch" : "PV64"   },
    "m2.xlarge"   : { "Arch" : "PV64"   },
    "m2.2xlarge"  : { "Arch" : "PV64"   },
    "m2.4xlarge"  : { "Arch" : "PV64"   },
    "m3.medium"   : { "Arch" : "HVM64"  },
    "m3.large"    : { "Arch" : "HVM64"  },
    "m3.xlarge"   : { "Arch" : "HVM64"  },
    "m3.2xlarge"  : { "Arch" : "HVM64"  },
    "m4.large"    : { "Arch" : "HVM64"  },
    "m4.xlarge"   : { "Arch" : "HVM64"  },
    "m4.2xlarge"  : { "Arch" : "HVM64"  },
    "m4.4xlarge"  : { "Arch" : "HVM64"  },
    "m4.10xlarge" : { "Arch" : "HVM64"  },
    "c1.medium"   : { "Arch" : "PV64"   },
    "c1.xlarge"   : { "Arch" : "PV64"   },
    "c3.large"    : { "Arch" : "HVM64"  },
    "c3.xlarge"   : { "Arch" : "HVM64"  },
    "c3.2xlarge"  : { "Arch" : "HVM64"  },
    "c3.4xlarge"  : { "Arch" : "HVM64"  },
    "c3.8xlarge"  : { "Arch" : "HVM64"  },
    "c4.large"    : { "Arch" : "HVM64"  },
    "c4.xlarge"   : { "Arch" : "HVM64"  },
    "c4.2xlarge"  : { "Arch" : "HVM64"  },
    "c4.4xlarge"  : { "Arch" : "HVM64"  },
    "c4.8xlarge"  : { "Arch" : "HVM64"  },
    "g2.2xlarge"  : { "Arch" : "HVMG2"  },
    "g2.8xlarge"  : { "Arch" : "HVMG2"  },
    "r3.large"    : { "Arch" : "HVM64"  },
    "r3.xlarge"   : { "Arch" : "HVM64"  },
    "r3.2xlarge"  : { "Arch" : "HVM64"  },
    "r3.4xlarge"  : { "Arch" : "HVM64"  },
    "r3.8xlarge"  : { "Arch" : "HVM64"  },
    "i2.xlarge"   : { "Arch" : "HVM64"  },
    "i2.2xlarge"  : { "Arch" : "HVM64"  },
    "i2.4xlarge"  : { "Arch" : "HVM64"  },
    "i2.8xlarge"  : { "Arch" : "HVM64"  },
    "d2.xlarge"   : { "Arch" : "HVM64"  },
    "d2.2xlarge"  : { "Arch" : "HVM64"  },
    "d2.4xlarge"  : { "Arch" : "HVM64"  },
    "d2.8xlarge"  : { "Arch" : "HVM64"  },
    "hi1.4xlarge" : { "Arch" : "HVM64"  },
    "hs1.8xlarge" : { "Arch" : "HVM64"  },
    "cr1.8xlarge" : { "Arch" : "HVM64"  },
    "cc2.8xlarge" : { "Arch" : "HVM64"  }
  },
  "AWSInstanceType2NATArch" : {
    "t1.micro"    : { "Arch" : "NATPV64"   },
    "t2.nano"     : { "Arch" : "NATHVM64"  },
    "t2.micro"    : { "Arch" : "NATHVM64"  },
    "t2.small"    : { "Arch" : "NATHVM64"  },
    "t2.medium"   : { "Arch" : "NATHVM64"  },
    "t2.large"    : { "Arch" : "NATHVM64"  },
    "m1.small"    : { "Arch" : "NATPV64"   },
    "m1.medium"   : { "Arch" : "NATPV64"   },
    "m1.large"    : { "Arch" : "NATPV64"   },
    "m1.xlarge"   : { "Arch" : "NATPV64"   },
    "m2.xlarge"   : { "Arch" : "NATPV64"   },
    "m2.2xlarge"  : { "Arch" : "NATPV64"   },
    "m2.4xlarge"  : { "Arch" : "NATPV64"   },
    "m3.medium"   : { "Arch" : "NATHVM64"  },
    "m3.large"    : { "Arch" : "NATHVM64"  },
    "m3.xlarge"   : { "Arch" : "NATHVM64"  },
    "m3.2xlarge"  : { "Arch" : "NATHVM64"  },
    "m4.large"    : { "Arch" : "NATHVM64"  },
    "m4.xlarge"   : { "Arch" : "NATHVM64"  },
    "m4.2xlarge"  : { "Arch" : "NATHVM64"  },
    "m4.4xlarge"  : { "Arch" : "NATHVM64"  },
    "m4.10xlarge" : { "Arch" : "NATHVM64"  },
    "c1.medium"   : { "Arch" : "NATPV64"   },
    "c1.xlarge"   : { "Arch" : "NATPV64"   },
    "c3.large"    : { "Arch" : "NATHVM64"  },
    "c3.xlarge"   : { "Arch" : "NATHVM64"  },
    "c3.2xlarge"  : { "Arch" : "NATHVM64"  },
    "c3.4xlarge"  : { "Arch" : "NATHVM64"  },
    "c3.8xlarge"  : { "Arch" : "NATHVM64"  },
    "c4.large"    : { "Arch" : "NATHVM64"  },
    "c4.xlarge"   : { "Arch" : "NATHVM64"  },
    "c4.2xlarge"  : { "Arch" : "NATHVM64"  },
    "c4.4xlarge"  : { "Arch" : "NATHVM64"  },
    "c4.8xlarge"  : { "Arch" : "NATHVM64"  },
    "g2.2xlarge"  : { "Arch" : "NATHVMG2"  },
    "g2.8xlarge"  : { "Arch" : "NATHVMG2"  },
    "r3.large"    : { "Arch" : "NATHVM64"  },
    "r3.xlarge"   : { "Arch" : "NATHVM64"  },
    "r3.2xlarge"  : { "Arch" : "NATHVM64"  },
    "r3.4xlarge"  : { "Arch" : "NATHVM64"  },
    "r3.8xlarge"  : { "Arch" : "NATHVM64"  },
    "i2.xlarge"   : { "Arch" : "NATHVM64"  },
    "i2.2xlarge"  : { "Arch" : "NATHVM64"  },
    "i2.4xlarge"  : { "Arch" : "NATHVM64"  },
    "i2.8xlarge"  : { "Arch" : "NATHVM64"  },
    "d2.xlarge"   : { "Arch" : "NATHVM64"  },
    "d2.2xlarge"  : { "Arch" : "NATHVM64"  },
    "d2.4xlarge"  : { "Arch" : "NATHVM64"  },
    "d2.8xlarge"  : { "Arch" : "NATHVM64"  },
    "hi1.4xlarge" : { "Arch" : "NATHVM64"  },
    "hs1.8xlarge" : { "Arch" : "NATHVM64"  },
    "cr1.8xlarge" : { "Arch" : "NATHVM64"  },
    "cc2.8xlarge" : { "Arch" : "NATHVM64"  }
},
  "AWSRegionArch2AMI" : {
    "us-east-1"        : {"PV64" : "ami-2a69aa47", "HVM64" : "ami-6869aa05", "HVMG2" : "ami-bb18efad"},
    "us-west-2"        : {"PV64" : "ami-7f77b31f", "HVM64" : "ami-7172b611", "HVMG2" : "ami-31912f51"},
    "us-west-1"        : {"PV64" : "ami-a2490dc2", "HVM64" : "ami-31490d51", "HVMG2" : "ami-0a9dcf6a"},
    "eu-west-1"        : {"PV64" : "ami-4cdd453f", "HVM64" : "ami-f9dd458a", "HVMG2" : "ami-873e61e1"},
    "eu-west-2"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-886369ec", "HVMG2" : "NOT_SUPPORTED"},
    "eu-central-1"     : {"PV64" : "ami-6527cf0a", "HVM64" : "ami-ea26ce85", "HVMG2" : "ami-a16ba4ce"},
    "ap-northeast-1"   : {"PV64" : "ami-3e42b65f", "HVM64" : "ami-374db956", "HVMG2" : "ami-6b443f0c"},
    "ap-northeast-2"   : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-2b408b45", "HVMG2" : "NOT_SUPPORTED"},
    "ap-southeast-1"   : {"PV64" : "ami-df9e4cbc", "HVM64" : "ami-a59b49c6", "HVMG2" : "ami-1c0ba17f"},
    "ap-southeast-2"   : {"PV64" : "ami-63351d00", "HVM64" : "ami-dc361ebf", "HVMG2" : "ami-bf0d0adc"},
    "ap-south-1"       : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-ffbdd790", "HVMG2" : "ami-6135440e"},
    "us-east-2"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-f6035893", "HVMG2" : "NOT_SUPPORTED"},
    "ca-central-1"     : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-730ebd17", "HVMG2" : "NOT_SUPPORTED"},
    "sa-east-1"        : {"PV64" : "ami-1ad34676", "HVM64" : "ami-6dd04501", "HVMG2" : "NOT_SUPPORTED"},
    "cn-north-1"       : {"PV64" : "ami-77559f1a", "HVM64" : "ami-8e6aa0e3", "HVMG2" : "NOT_SUPPORTED"}
  }
},
"Resources" : {
  "WebServer" : {
    "Type" : "AWS::EC2::Instance",
    "Metadata" : {
       "Comment1" : "Configure bootstrap helpers to install the apache and php",
       "Comment2" : "Save web site content to /var/www/html/index.php",
       "AWS::CloudFormation::Init" : {
          "ConfigSets" : {
            "InstallAndRun": ["Install","Configure"]
          },
          "Install" : {
            "packages" : {
              "yum" : {
                "mysql" : [],
                "mysql-server" : [],
                "mysql-libs" : [],
                "httpd" : [],
                "php" : [],
                "php-mysql" : []
                }
            },
            "files" : {
              "/var/www/html/index.php" : {
                "content" : { "Fn::Join" : [ "", [
                  "<html>\n",
                  "  <head>\n",
                  "    <title>AWS CloudFormation PHP Sample</title>\n",
                  "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n",
                  "  </head>\n",
                  "  <body>\n",
                  "    <h1>Welcome to the AWS CloudFormation PHP Sample</h1>\n",
                  "    <p/>\n",
                  "    <?php\n",
                  "      // Print out the current data and time\n",
                  "      print \"The Current Date and Time is: <br/>\";\n",
                  "      print date(\"g:i A l, F j Y.\");\n",
                  "    ?>\n",
                  "    <p/>\n",
                  "    <?php\n",
                  "      // Setup a handle for CURL\n",
                  "      $curl_handle=curl_init();\n",
                  "      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);\n",
                  "      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);\n",
                  "      // Get the hostname of the instance from the instance metadata\n",
                  "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');\n",
                  "      $hostname = curl_exec($curl_handle);\n",
                  "      if (empty($hostname))\n",
                  "      {\n",
                  "        print \"Sorry, for some reason, we got no hostname back <br />\";\n",
                  "      }\n",
                  "      else\n",
                  "      {\n",
                  "        print \"Server = \" . $hostname . \"<br />\";\n",
                  "      }\n",
                  "      // Get the instance-id of the instance from the instance metadata\n",
                  "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');\n",
                  "      $instanceid = curl_exec($curl_handle);\n",
                  "      if (empty($instanceid))\n",
                  "      {\n",
                  "        print \"Sorry, for some reason, we got no instance id back <br />\";\n",
                  "      }\n",
                  "      else\n",
                  "      {\n",
                  "        print \"EC2 instance-id = \" . $instanceid . \"<br />\";\n",
                  "      }\n",
                  "      $Database   = \"", {"Ref" : "DBName"}, "\";\n",
                  "      $DBUser     = \"", {"Ref" : "DBUsername"}, "\";\n",
                  "      $DBPassword = \"", {"Ref" : "DBPassword"}, "\";\n",
                  "      print \"Database = \" . $Database . \"<br />\";\n",
                  "      $dbconnection = mysql_connect($Database, $DBUser, $DBPassword)\n",
                  "                      or die(\"Could not connect: \" . ysql_error());\n",
                  "      print (\"Connected to $Database successfully\");\n",
                  "      mysql_close($dbconnection);\n",
                  "    ?>\n",
                  "    <h2>PHP Information</h2>\n",
                  "    <p/>\n",
                  "    <?php\n",
                  "      phpinfo();\n",
                  "    ?>\n",
                  "  </body>\n",
                  "</html>\n"
                ]]},
                "mode"  : "000600",
                "owner" : "apache",
                "group" : "apache"
              },
              "/tmp/setup.mysql" : {
                "content" : { "Fn::Join" : ["", [
                  "CREATE DATABASE ", { "Ref" : "DBName" }, ";\n",
                  "GRANT ALL ON ", { "Ref" : "DBName" }, ".* TO '", { "Ref" : "DBUsername" }, "'@localhost IDENTIFIED BY '", { "Ref" : "DBPassword" }, "';\n"
                  ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource WebServerInstance ",
                  "         --configsets InstallAndRun ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            }
            },

            "services" : {
              "sysvinit" : {
                "mysqld"  : { "enabled" : "true", "ensureRunning" : "true" },
                "httpd"   : { "enabled" : "true", "ensureRunning" : "true" },
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          },
          "Configure" : {
            "commands" : {
              "01_set_mysql_root_password" : {
                "command" : { "Fn::Join" : ["", ["mysqladmin -u root password '", { "Ref" : "DBRootPassword" }, "'"]]},
                "test" : { "Fn::Join" : ["", ["$(mysql ", { "Ref" : "DBUsername" }, " -u root --password='", { "Ref" : "DBRootPassword" }, "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"]]}
              },
              "02_create_database" : {
                "command" : { "Fn::Join" : ["", ["mysql -u root --password='", { "Ref" : "DBRootPassword" }, "' < /tmp/setup.mysql"]]},
                "test" : { "Fn::Join" : ["", ["$(mysql ", { "Ref" : "DBUsername" }, " -u root --password='", { "Ref" : "DBRootPassword" }, "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"]]}
              }
        }
      },
              "services" : {
                "sysvinit" : {
                  "httpd" : {"enabled" : "true" , "ensurerunning" : "true"}
                }
              }
            },

"Properties" : {
      "Tags" : [
        {
          "Key" : "Name",
          "Value" : {
            "Ref" : "AWS::StackName"
          }
        },
        {
          "Key" : "Version",
          "Value" : "3"
        }
      ],
      "ImageId" : {"Fn::FindInMap" : ["AWSRegionArch2AMI",{"Ref":"AWS::Region"},{"Fn::FindInMap" : ["AWSInstanceType2Arch",{"Ref":"InstanceType" },"Arch"]}]},
      "InstanceType":{"Ref" : "InstanceType"},
      "KeyName" : {"Ref" : "KeyName"},
      "UserData" : { "Fn::Base64" : {"Fn::Join" : ["", [
        "#!/bin/bash -xe\n",
          "yum install -y aws-cfn-bootstrap\n",

          "# Install the files and packages from the metadata\n",
          "/opt/aws/bin/cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource WebServerInstance ",
          "         --configsets InstallAndRun ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",
          "# Signal the status from cfn-init\n",
             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource WebServerInstance ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}

      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT5M"
        }
      },
      "SecurityGroups" : [{"Ref" : "InstanceSecurityGroup"}]
    }
  },


  "InstanceSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
      "GroupDescription" : "Enable SSH via Port 22",
      "SecurityGroupIngress" : [{
        "IpProtocol" : "tcp",
        "FromPort" : "20",
        "ToPort" : "24",
        "CidrIp" : {"Ref" : "SSHLocation"}
                }]
    }
  }
},
"Outputs" : {
  "InstanceId" : {
    "Description" : "InstanceID for newly created instance",
    "Value" : {"Ref" : "WebServer"}
  },
  "AZ" : {
    "Description" : "Availability zone of newly created instance",
    "Value" : {"Fn::GetAtt" : ["WebServer","AvailabilityZone"]}
  },
  "PublicDNS" : {
    "Description" : "Public DNSname of the newly created EC2 Instance",
    "Value" : {"Fn::GetAtt" : ["WebServer","PublicDnsName"]}
  },
  "PublicIP" : {
    "Description" : "Public IP address of the newly created instance",
    "Value" : {"Fn::GetAtt" : ["WebServer","PublicIp"]}
  }
}
}
